# Pipeline Decorators build & publish pipeline
# Builds the extension, increments the patch number, and publishes the extension.
# https://aka.ms/yaml

parameters:
  - name: ManifestFile
    type: string
    displayName: Extension manifest file
    default: 'vss-extension.json'
  - name: GitUserEmail
    type: string
    displayName: Git user email
    default: 'noemail@contoso.com'
  - name: GitUserName
    type: string
    displayName: Git user name
    default: 'Azure Pipelines'

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  # Group defines variables: $(PersonalAccessToken), $(ShareWithOrgs)
  #  'PersonalAccessToken' is an Azure DevOps PAT with full Marketplace access
  #  'ShareWithOrgs' is a space-separated list of Azure DevOps orgs to share the extension with
  - group: pipeline-decorators-variables
    
stages:
- stage:
  jobs:
  - job:
    steps:

    - checkout: self
      clean: true
      persistCredentials: true

    - task: PowerShell@2
      condition: eq(variables['PersonalAccessToken'], '')
      displayName: 'Error if PAT is not set'
      inputs:
        pwsh: true
        targetType: 'inline'
        script: |
          Write-Output "Variable 'PersonalAccessToken' is not set. Please set it in the pipeline variable group named 'pipeline-decorators-variables'. See https://learn.microsoft.com/azure/devops/extend/publish/command-line for more information."
          exit 1

    - task: PowerShell@2
      name: InstallTools
      displayName: 'Install tools'
      inputs:
        pwsh: true
        targetType: 'inline'
        script: |
          Write-Output "Installing tools..."
          npm install -g typescript
          npm install -g tfx-cli

    - task: PowerShell@2
      displayName: 'Increment version'
      inputs:
        pwsh: true
        targetType: 'inline'
        script: |
          Write-Output "Incrementing patch number..."
          $manifest = (Get-Content -Raw ${{ parameters.ManifestFile }} | ConvertFrom-Json -Depth 100)
          $version = $manifest.version
          $versionParts = $version.Split('.')
          $versionParts[2] = [string]([int]$versionParts[2] + 1)
          $manifest.version = $versionParts -join '.'
          $manifest | ConvertTo-Json -Depth 100 | Set-Content ${{ parameters.ManifestFile }}

    - task: PowerShell@2
      displayName: 'Package extension'
      inputs:
        pwsh: true
        targetType: 'inline'
        script: |
          Write-Output "Packaging extension..."
          tfx extension create --manifests ${{ parameters.ManifestFile }}

    - task: PowerShell@2
      condition: eq(variables['ShareWithOrgs'], '')
      displayName: 'Publish extension without sharing'
      inputs:
        pwsh: true
        targetType: 'inline'
        script: |
          Write-Output "Publishing extension..."
          $PackageFile = (Get-ChildItem -Filter '*.vsix' -File)[0].Name
          Write-Output "Using package file: $PackageFile"
          tfx extension publish --auth-type pat --token $(PersonalAccessToken) --manifests ${{ parameters.ManifestFile }} --vsix $PackageFile

    - task: PowerShell@2
      condition: ne(variables['ShareWithOrgs'], '')
      displayName: 'Publish extension and share with orgs'
      inputs:
        pwsh: true
        targetType: 'inline'
        script: |
          Write-Output "Publishing and sharing with the following organizations: $(ShareWithOrgs)"
          $PackageFile = (Get-ChildItem -Filter '*.vsix' -File)[0].Name
          Write-Output "Using package file: $PackageFile"
          tfx extension publish --auth-type pat --token $(PersonalAccessToken) --manifests ${{ parameters.ManifestFile }} --vsix $PackageFile --share-with $(ShareWithOrgs)
              
    - task: PowerShell@2
      displayName: 'Commit changes'
      inputs:
        pwsh: true
        targetType: 'inline'
        script: |
          Write-Output "Committing version changes to manifest file ${{ parameters.ManifestFile }}"
          git config --global user.email ${{ parameters.GitUserEmail }}
          git config --global user.name ${{ parameters.GitUserName }}
          git add ${{ parameters.ManifestFile }}
          git commit -m "Incremented patch number [skip ci]"
          git push origin HEAD:$(Build.SourceBranchName)
          Write-Output "If this step fails with a permission error, you may need to grant the 'Contribute' permission to the build service account on the repo. See https://learn.microsoft.com/azure/devops/pipelines/scripts/git-commands?view=azure-devops&tabs=yaml#grant-version-control-permissions-to-the-build-service for more information."

